#My commands
docker build --tag="name_of_the_image:version" directory(use .)
docker-compose build
docker-compose run --rm app django-admin startproject core[name of the project] .
docker-compose up
docker exec -it core[name of the container] /bin/bash
docker exec -it core[name of the container] sh
python manage.py startapp blog[name of the app]
python manage.py migrate
flower -A core[name of directory that celery located] --port=5555
celery -A core beat -l INFO

#Run Celery Task
    python manage.py shell
    from blog.tasks import add
    add.delay(2, 2)

Info:
PYTHONUNBUFFERED:
Setting the non-empty value of PYTHONUNBUFFERED means 
that the python output is transmitted directly to the 
terminal without being buffered and that allows displaying 
the applicationâ€™s output in real-time. 

--rm = remove
sh = shell
-c = command

docker exec -it django_container /bin/bash:
running command in container, cannot be used in alpine build. Instead use [docker exec -it django_app sh]

# Heroku commands
heroku container:login // login to heroku
heroku create // create app in heroku
heroku container:push web -a=your-app-name // Push your app to the heroku app
heroku config:add YOUR_KEY_ENV_VARIABLE=YOUR_VALUE_ENV_VARIABLE -a your-app-name // Add config env variable to heruko
heroku config:get YOUR_KEY_ENV_VARIABLE // To look at your env variable in heroku
heroku container:release -a your-app-name web // Release your heroku app
heroku logs --tail -a your-app-name // Back end logs from heroku
heroku open -a your-app-name // Open your heroku app